{"version":3,"sources":["Componets/Square.js","Patterns.js","App.js","reportWebVitals.js","index.js"],"names":["Square","val","chooseSquare","className","onClick","Patterns","App","useState","board","setBoard","player","setPlayer","Winner","State","result","setResult","useEffect","checkWin","checkTie","alert","restartGame","square","map","idx","forEach","currPattern","firstPlayer","foundWinningPattern","filled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAWeA,MATf,YAAuC,IAArBC,EAAoB,EAApBA,IAAIC,EAAgB,EAAhBA,aAEpB,OACE,qBAAKC,UAAU,SAASC,QAASF,EAAjC,SACKD,KCNII,EAAW,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,ICwFIC,MA5Ff,WACA,MAAyBC,mBAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAA3D,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA2BF,mBAAS,KAApC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA2BJ,mBAAS,CAAEK,OAAS,OAAQC,MAAO,SAA9D,mBAAOC,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACVC,IACAC,IAGEP,EAFY,KAAVD,EAEQ,IAEA,OAGT,CAACF,IAEJQ,qBAAU,WACY,QAAhBF,EAAOD,QAEZM,MAAM,kCAAD,OAAmCL,EAAOF,SAC/CQ,OAEC,CAACN,IAED,IAAMZ,EAAe,SAACmB,GACpBZ,EACED,EAAMc,KAAI,SAACrB,EAAIsB,GACb,OAAIA,GAAOF,GAAiB,IAAPpB,EACZS,EAEFT,OAKTgB,EAAW,WACfZ,EAASmB,SAAQ,SAACC,GAChB,IAAMC,EAAclB,EAAMiB,EAAY,IACtC,GAAmB,IAAfC,EAAJ,CACA,IAAIC,GAAsB,EAC1BF,EAAYD,SAAQ,SAACD,GACff,EAAMe,IAAQG,IAChBC,GAAsB,MAIC,GAAvBA,GACFZ,EAAU,CAACH,OAAOF,EAAQG,MAAM,aAKhCK,EAAW,WACf,IAAIU,GAAS,EACbpB,EAAMgB,SAAQ,SAACH,GACC,IAAVA,IACFO,GAAS,MAGTA,GACFb,EAAU,CAACH,OAAQ,SAAUC,MAAO,SAGlCO,EAAc,WACpBT,EAAU,KACVF,EAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,MAElC,OAEI,qBAAKN,UAAU,MAAf,SACE,sBAAKA,UAAU,QAAf,UACA,sBAAKA,UAAU,MAAf,UACE,cAAC,EAAD,CAAQF,IAAKO,EAAM,GAAIN,aAAc,WAAKA,EAAa,MACvD,cAAC,EAAD,CAAQD,IAAKO,EAAM,GAAIN,aAAc,WAAKA,EAAa,MACvD,cAAC,EAAD,CAAQD,IAAKO,EAAM,GAAIN,aAAc,WAAKA,EAAa,SAEzD,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,CAAQF,IAAKO,EAAM,GAAIN,aAAc,WAAOA,EAAa,MACzD,cAAC,EAAD,CAAQD,IAAKO,EAAM,GAAIN,aAAc,WAAOA,EAAa,MACzD,cAAC,EAAD,CAAQD,IAAKO,EAAM,GAAIN,aAAc,WAAOA,EAAa,SAE3D,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,CAAQF,IAAKO,EAAM,GAAIN,aAAc,WAAOA,EAAa,MACzD,cAAC,EAAD,CAAQD,IAAKO,EAAM,GAAIN,aAAc,WAAOA,EAAa,MACzD,cAAC,EAAD,CAAQD,IAAKO,EAAM,GAAIN,aAAc,WAAOA,EAAa,eC7ElD2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e2b79798.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"../App.css\"\r\nfunction Square({ val,chooseSquare }) {\r\n  \r\n  return (\r\n    <div className=\"square\" onClick={chooseSquare}>\r\n        {val}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n\r\n","export const Patterns = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n];","import './App.css';\nimport {useState, useEffect} from 'react'\nimport Square from \"./Componets/Square\";\nimport { Patterns } from \"./Patterns\";\nfunction App() {\nconst [board,setBoard] = useState([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"])\nconst [player,setPlayer] = useState(\"O\");\nconst [result,setResult] = useState({ Winner : \"none\", State: \"none\" }) \n\nuseEffect(()=>{\ncheckWin();\ncheckTie();\nif (player == \"X\")\n{\n  setPlayer(\"O\");\n}else\n{ setPlayer(\"X\");\n}\n\n}, [board]);\n\nuseEffect(()=>{\n  if (result.State != \"none\"){\n\n alert(`game finished! winning Player: ${result.Winner}`);\n restartGame();\n}\n},[result]);  \n\n  const chooseSquare = (square) =>{\n    setBoard(\n      board.map((val,idx) =>{\n        if (idx == square && val == \"\") {\n          return player;\n        }\n        return val;\n      \n      })\n    );\n}\nconst checkWin = () => {\n  Patterns.forEach((currPattern) => {\n    const firstPlayer = board[currPattern[0]];\n    if (firstPlayer == \"\") return;\n    let foundWinningPattern = true\n    currPattern.forEach((idx) => {\n      if (board[idx] != firstPlayer) {\n        foundWinningPattern = false\n\n      }\n    })\n    if (foundWinningPattern == true) {\n      setResult({Winner:player, State:\"Won\"})\n\n    }\n  });\n};\nconst checkTie = () => {\n  let filled = true;\n  board.forEach((square) => {\n    if (square == \"\") {\n      filled = false;\n    } \n  });\n  if (filled) {\n    setResult({Winner: \"No one\", State: \"Tie\"});\n  }\n}\nconst restartGame = () => {\nsetPlayer(\"O\");\nsetBoard([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]);\n}\nreturn (\n\n    <div className=\"App\">\n      <div className=\"board\">\n      <div className=\"row\">\n        <Square val={board[0]} chooseSquare={()=>{chooseSquare(0)}}/>\n        <Square val={board[1]} chooseSquare={()=>{chooseSquare(1)}}/>\n        <Square val={board[2]} chooseSquare={()=>{chooseSquare(2)}}/>\n      </div>\n      <div className=\"row\">\n        <Square val={board[3]} chooseSquare={() => {chooseSquare(3)}}/>\n        <Square val={board[4]} chooseSquare={() => {chooseSquare(4)}}/>\n        <Square val={board[5]} chooseSquare={() => {chooseSquare(5)}}/>\n      </div>\n      <div className=\"row\">\n        <Square val={board[6]} chooseSquare={() => {chooseSquare(6)}}/>\n        <Square val={board[7]} chooseSquare={() => {chooseSquare(7)}}/>\n        <Square val={board[8]} chooseSquare={() => {chooseSquare(8)}}/>\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}